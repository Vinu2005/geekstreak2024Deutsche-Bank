Binary Tree to DLL
Difficulty: HardAccuracy: 53.36%Submissions: 139K+Points: 8
Given a Binary Tree (BT), convert it to a Doubly Linked List (DLL) in place. The left and right pointers in nodes will be used as previous and next pointers respectively in converted DLL. The order of nodes in DLL must be the same as the order of the given Binary Tree. The first node of Inorder traversal (leftmost node in BT) must be the head node of the DLL.

Note: h is the tree's height, and this space is used implicitly for the recursion stack.

TreeToList

Examples:

Input:
      1
    /  \
   3    2
Output:
3 1 2 
2 1 3

Explanation: DLL would be 3<=>1<=>2
Input:
       10
      /   \
     20   30
   /   \
  40   60
Output:
40 20 60 10 30 
30 10 60 20 40

Explanation:  DLL would be 40<=>20<=>60<=>10<=>30.
Expected Time Complexity: O(no. of nodes)
Expected Space Complexity: O(height of the tree)

Constraints:
1 ≤ Number of nodes ≤ 10^5 
0 ≤ Data of a node ≤ 10^5

'''
class Node:
    """ Class Node """
    def __init__(self, value):
        self.left = None
        self.data = value
        self.right = None
'''

#Function to convert a binary tree to doubly linked list.
class Solution:
    def __init__(self):
        self.prev = None  # To keep track of the previous node in the inorder traversal
        self.head = None  # This will be the head of the DLL

    def bToDLL(self,root):
        # Helper function to perform the inorder traversal and link nodes
        if root is None:
            return
        
        # Recursively convert the left subtree
        self.bToDLL(root.left)
        
        # Now deal with the current node
        if self.prev is None:
            # This is the leftmost node, so it becomes the head of the DLL
            self.head = root
        else:
            # Link the previous node with the current node
            root.left = self.prev
            self.prev.right = root
        
        # Update the previous node to be the current one
        self.prev = root
        
        # Recursively convert the right subtree
        self.bToDLL(root.right)
        
        # Return the head of the DLL
        return self.head

# Helper function to print the Doubly Linked List from left to right
def print_dll(head):
    current = head
    while current is not None:
        print(current.data, end=" ")
        current = current.right
    print()

# Helper function to print the Doubly Linked List from right to left
def print_dll_reverse(head):
    current = head
    # Move to the last node
    while current.right is not None:
        current = current.right
    
    # Now print from last to first
    while current is not None:
        print(current.data, end=" ")
        current = current.left
    print()
