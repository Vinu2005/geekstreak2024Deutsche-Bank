Merge two BST 's
Difficulty: MediumAccuracy: 64.95%Submissions: 83K+Points: 4
Given two BSTs, return elements of merged BSTs in sorted form.

Examples :

Input:
BST1:
       5
     /   \
    3     6
   / \
  2   4  
BST2:
        2
      /   \
     1     3
            \
             7
            /
           6
Output: 1 2 2 3 3 4 5 6 6 7
Explanation: After merging and sorting the two BST we get 1 2 2 3 3 4 5 6 6 7.
Input:
BST1:
       12
     /   
    9
   / \    
  6   11
BST2:
      8
    /  \
   5    10
  /
 2
Output: 2 5 6 8 9 10 11 12
Explanation: After merging and sorting the two BST we get 2 5 6 8 9 10 11 12.
Expected Time Complexity: O((m+n)*log(m+n))
Expected Auxiliary Space: O(Height of BST1 + Height of BST2 + m + n)

Constraints:
1 ≤ Number of Nodes, value of nodes ≤ 10^5

class Solution:
    def merge(self, root1, root2):
        # Initialize an empty list to store node values from both BSTs
        l = []

        # Helper function to perform pre-order traversal on a BST
        def tree(root, l):
            if root is None:
                # If the node is None (base case), return from the function
                return
            # Append the current node's data to the list
            l.append(root.data)
            # Recursively traverse the left subtree
            tree(root.left, l)
            # Recursively traverse the right subtree
            tree(root.right, l)

        # Traverse the first BST and store its values in the list
        tree(root1, l)
        # Traverse the second BST and store its values in the list
        tree(root2, l)

        # Sort the combined list of values from both BSTs
        l.sort()

        # Return the sorted list of merged elements
        return l
