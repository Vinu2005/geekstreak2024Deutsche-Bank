Parenthesis Checker
Difficulty: EasyAccuracy: 28.56%Submissions: 590K+Points: 2
Given an expression string x. Examine whether the pairs and the orders of {,},(,),[,] are correct in exp.
For example, the function should return 'true' for exp = [()]{}{[()()]()} and 'false' for exp = [(]).

Note: The driver code prints "balanced" if function return true, otherwise it prints "not balanced".

Examples :

Input: {([])}
Output: true
Explanation: { ( [ ] ) }. Same colored brackets can form balanced pairs, with 0 number of unbalanced bracket.
Input: ()
Output: true
Explanation: (). Same bracket can form balanced pairs,and here only 1 type of bracket is present and in balanced way.
Input: ([]
Output: false
Explanation: ([]. Here square bracket is balanced but the small bracket is not balanced and Hence , the output will be unbalanced.
Expected Time Complexity: O(|x|)
Expected Auixilliary Space: O(|x|)

Constraints:
1 ≤ |x| ≤ 10^5

class Solution:
    
    #Function to check if brackets are balanced or not.
    def ispar(self,x):
        # Stack to keep track of opening brackets
        stack = []
        
        # Dictionary to match closing brackets with corresponding opening brackets
        matching_bracket = {')': '(', '}': '{', ']': '['}
        
        # Traverse the given expression
        for char in x:
            # If the character is an opening bracket, push it onto the stack
            if char in '({[':
                stack.append(char)
            # If the character is a closing bracket
            elif char in ')}]':
                # Check if the stack is not empty and top of the stack matches the current closing bracket
                if stack and stack[-1] == matching_bracket[char]:
                    stack.pop()  # Pop the top element if it matches
                else:
                    return False  # Unbalanced if there's a mismatch
        
        # If the stack is empty, brackets are balanced; otherwise, they are not
        return len(stack) == 0
